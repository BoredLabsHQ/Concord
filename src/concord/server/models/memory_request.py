# coding: utf-8

"""
    Concord API

    API for Concord, an AI-powered semantic extraction and recommendation platform for networked communities.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from concord.server.models.memory_photo import MemoryPhoto
from concord.server.models.plugin_response import PluginResponse
from concord.server.models.structured import Structured
from concord.server.models.transcript_segment import TranscriptSegment
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class MemoryRequest(BaseModel):
    """
    MemoryRequest
    """

    # noqa: E501
    created_at: datetime = Field(alias="createdAt")
    started_at: Optional[datetime] = Field(default=None, alias="startedAt")
    finished_at: Optional[datetime] = Field(default=None, alias="finishedAt")
    transcript: Optional[StrictStr] = None
    transcript_segments: Optional[List[TranscriptSegment]] = Field(
        default=None, alias="transcriptSegments")
    photos: Optional[List[MemoryPhoto]] = None
    recording_file_path: Optional[StrictStr] = Field(default=None,
                                                     alias="recordingFilePath")
    recording_file_base64: Optional[Union[StrictBytes, StrictStr]] = Field(
        default=None, alias="recordingFileBase64")
    structured: Structured
    plugins_response: List[PluginResponse] = Field(alias="pluginsResponse")
    discarded: StrictBool
    __properties: ClassVar[List[str]] = [
        "createdAt", "startedAt", "finishedAt", "transcript",
        "transcriptSegments", "photos", "recordingFilePath",
        "recordingFileBase64", "structured", "pluginsResponse", "discarded"
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MemoryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transcript_segments (list)
        _items = []
        if self.transcript_segments:
            for _item in self.transcript_segments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transcriptSegments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in photos (list)
        _items = []
        if self.photos:
            for _item in self.photos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['photos'] = _items
        # override the default output from pydantic by calling `to_dict()` of structured
        if self.structured:
            _dict['structured'] = self.structured.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in plugins_response (list)
        _items = []
        if self.plugins_response:
            for _item in self.plugins_response:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pluginsResponse'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MemoryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt":
            obj.get("createdAt"),
            "startedAt":
            obj.get("startedAt"),
            "finishedAt":
            obj.get("finishedAt"),
            "transcript":
            obj.get("transcript"),
            "transcriptSegments": [
                TranscriptSegment.from_dict(_item)
                for _item in obj.get("transcriptSegments")
            ] if obj.get("transcriptSegments") is not None else None,
            "photos":
            [MemoryPhoto.from_dict(_item) for _item in obj.get("photos")]
            if obj.get("photos") is not None else None,
            "recordingFilePath":
            obj.get("recordingFilePath"),
            "recordingFileBase64":
            obj.get("recordingFileBase64"),
            "structured":
            Structured.from_dict(obj.get("structured"))
            if obj.get("structured") is not None else None,
            "pluginsResponse": [
                PluginResponse.from_dict(_item)
                for _item in obj.get("pluginsResponse")
            ] if obj.get("pluginsResponse") is not None else None,
            "discarded":
            obj.get("discarded")
        })
        return _obj
